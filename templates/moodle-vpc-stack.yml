---
AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  License: Apache-2.0

Description: "This stack create vpc, subnets and security groups for moodle infrastructure."

Parameters:
  env:
    Description: Environment name to provision resources
    Type: String
    AllowedValues: ["dev", "prod"]
    Default: dev

  SSHLocation:
    Description: ip address allowed to ssh login bastion host, use command 'curl checkip.amazonaws.com' to get your Internet facing ip address
    Type: String
    Default: '123.243.138.223/32'

Mappings: 
  vpcName: 
    dev: 
      Name: "moodle-dev-vpc"
    prod: 
      Name: "moodle-prod-vpc"
  vpcCIDR:
    dev: 
      CIDR: "10.10.0.0/16"
    prod: 
      CIDR: "10.11.0.0/16"
  PublicSubnet1CIDR: 
    dev: 
      CIDR: "10.10.10.0/24"
    prod: 
      CIDR: "10.11.20.0/24"
  PublicSubnet2CIDR:
    dev: 
      CIDR: "10.10.12.0/24"
    prod: 
      CIDR: "10.11.22.0/24"
  PrivateSubnet1CIDR: 
    dev: 
      CIDR: "10.10.11.0/24"
    prod: 
      CIDR: "10.11.21.0/24"
  PrivateSubnet2CIDR:
    dev: 
      CIDR: "10.10.13.0/24"
    prod: 
      CIDR: "10.11.23.0/24"

Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [vpcCIDR, !Ref env, CIDR]
      Tags:
        - Key: Name
          Value: !FindInMap [vpcName, !Ref env, Name]
        - Key: Project
          Value: moodle
        - Key: Createdby
          Value: fen9li
        - Key: ChargeTo
          Value: !Ref env

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [PublicSubnet1CIDR, !Ref env, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [PublicSubnet2CIDR, !Ref env, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PublicSubnetTwo' ] ]

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [PrivateSubnet1CIDR, !Ref env, CIDR]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PrivateSubnetOne' ] ] 
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [PrivateSubnet2CIDR, !Ref env, CIDR]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PrivateSubnetTwo' ] ]

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PublicRouteTable' ] ]
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'NatGatewayOne' ] ]
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'NatGatewayTwo' ] ]
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PrivateRouteTableOne' ] ]
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PrivateRouteTableTwo' ] ]
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh login to the bastion host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'BastionHostSecurityGroup' ] ]
  BastionHostSecurityGroupIngressFromInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the Internet
      GroupId: !Ref BastionHostSecurityGroup
      CidrIp: !Ref SSHLocation
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'PublicLoadBalancerSG' ] ]
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      

  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref env , 'EcsHostSecurityGroup' ] ]
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EcsHostSecurityGroup
  EcsSecurityGroupIngressFromBastionHost:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the bastion host
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionHostSecurityGroup

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  StackName:
    Description: The name of this stack
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'StackName' ] ]

  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'EcsHostSecurityGroup'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'EcsHostSecurityGroup' ] ]

  BastionHostSecurityGroup:
    Description: A security group used to allow ssh login to bastion host
    Value: !Ref 'BastionHostSecurityGroup'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'BastionHostSecurityGroup' ] ]

  PublicLoadBalancerSG:
    Description: A security group used to allow ssh login to bastion host
    Value: !Ref 'PublicLoadBalancerSG'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicLoadBalancerSG' ] ]